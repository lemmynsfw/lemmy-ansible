x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "50m"
    max-file: "4"

services:
  proxy:
    image: docker.io/library/nginx 
    ports:
      # Note, change lemmy_port in vars.yml if it is already in use on your system
      - "127.0.0.1:{{ lemmy_port }}:8536"
    volumes:
      - ./nginx_internal.conf:/etc/nginx/nginx.conf:ro,Z
      - ./proxy_params:/etc/nginx/proxy_params:ro,Z
    restart: always
    logging: *default-logging
    depends_on:
      - pictrs
      - lemmy-ui

  lemmy:
    image: {{ lemmy_docker_image }}
    hostname: lemmy
    restart: always
    logging: *default-logging
    environment:
{% if lemmy_env_vars is defined and lemmy_env_vars|length > 0 %}
{% for item in lemmy_env_vars %}
{% for key, value in item.items() %}
      - {{ key }}={{ value }}
{% endfor %}
{% endfor %}
{% endif %}
    volumes:
      - ./lemmy.hjson:/config/config.hjson:Z
    depends_on:
      - postgres
      - pictrs

  lemmy-ui:
    image: {{ lemmy_docker_ui_image }}
    environment:
{% if lemmyui_env_vars is defined and lemmyui_env_vars|length > 0 %}
{% for item in lemmyui_env_vars %}
{% for key, value in item.items() %}
      - {{ key }}={{ value }}
{% endfor %}
{% endfor %}
{% endif %}
    volumes:
      - ./volumes/lemmy-ui/extra_themes:/app/extra_themes:Z
    depends_on:
      - lemmy
    restart: always
    logging: *default-logging

  pictrs:
    image: docker.io/asonix/pictrs:0.5
    # this needs to match the pictrs url in lemmy.hjson
    hostname: pictrs
    # we can set options to pictrs like this, here we set max. image size and forced format for conversion
    # entrypoint: /sbin/tini -- /usr/local/bin/pict-rs -p /mnt -m 4 --image-format webp
    environment:
{% if pictrs_env_vars is defined and pictrs_env_vars|length > 0 %}
{% for item in pictrs_env_vars %}
{% for key, value in item.items() %}
      - {{ key }}={{ value }}
{% endfor %}
{% endfor %}
{% endif %}
{% if pictrs_safety is defined and pictrs_safety|bool == true %}
      - PICTRS__MEDIA__EXTERNAL_VALIDATION=http://{{ domain }}:14051/api/v1/scan/IPADDR
{% endif %}
    user: 991:991
    restart: always
    logging: *default-logging
    deploy:
      resources:
        limits:
          memory: 4gb
    depends_on:
      - postgres

  postgres:
    image: docker.io/pgautoupgrade/pgautoupgrade:16-alpine
    hostname: postgres
    ports:
      - "5432:5432"
    environment:
{% if postgres_env_vars is defined and postgres_env_vars|length > 0 %}
{% for item in postgres_env_vars %}
{% for key, value in item.items() %}
      - {{ key }}={{ value }}
{% endfor %}
{% endfor %}
{% endif %}
    volumes:
      - ./volumes/postgres:/var/lib/postgresql/data:Z
      - ./customPostgresql.conf:/etc/postgresql.conf:Z
    restart: always
    command: postgres -c config_file=/etc/postgresql.conf
    shm_size: {{ postgres_shm }}
    logging: *default-logging

{% if pictrs_safety is defined and pictrs_safety|bool == true %}
  pictrs-safety:
    image: ghcr.io/db0/pictrs-safety:v1.2.2
    hostname: pictrs-safety
    environment:
{% if pictrs_safety_env_vars is defined and pictrs_safety_env_vars|length > 0 %}
{% for item in pictrs_safety_env_vars %}
{% for key, value in item.items() %}
      - {{ key }}={{ value }}
{% endfor %}
{% endfor %}
{% endif %}
    ports:
      - "14051:14051"
    user: 991:991
    restart: always
    logging: *default-logging
    depends_on:
      - pictrs
{% endif %}

  watchtower_apps:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_LABEL_ENABLE=true
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=1600
    restart: always
  voyager:
    image: ghcr.io/aeharding/voyager:main
    ports:
      - "5314:5314"
    environment:
      - CUSTOM_LEMMY_SERVERS={{ domain }}
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    restart: always
  photon:
    image: ghcr.io/xyphyn/photon
    ports:
      - "5315:3000"
    environment:
      - PUBLIC_INSTANCE_URL={{ domain }}
      - PUBLIC_NSFW_BLUR=false
      - PUBLIC_SHOW_INSTANCES_USER=false
      - PUBLIC_SHOW_INSTANCES_COMMUNITY=false
      - PUBLIC_SHOW_INSTANCES_COMMENTS=false
      - PUBLIC_EXPAND_SIDEBAR=false
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    restart: always
  alexandrite:
    image: ghcr.io/sheodox/alexandrite
    ports:
      - "5316:3000"
    environment:
      - ALEXANDRITE_DEFAULT_INSTANCE={{ domain }}
      - ALEXANDRITE_FORCE_INSTANCE={{ domain }}
      - ALEXANDRITE_WELCOME_INSTANCE_HELP=false
      - ALEXANDRITE_WELCOME_LEMMY_HELP=false
    labels:
      - "com.centurylinklabs.watchtower.enable=true"
    restart: always
  automod:
    image: ghcr.io/lemmynsfw/lemmy-automoderator:latest
    hostname: automod
    environment:
{% if lemmy_automod_env_vars is defined and lemmy_automod_env_vars|length > 0 %}
{% for item in lemmy_automod_env_vars %}
{% for key, value in item.items() %}
      - {{ key }}={{ value }}
{% endfor %}
{% endfor %}
{% endif %}
    restart: always
    volumes:
      - ./volumes/automoderator:/usr/src/app/database

#rikudou automod stack
  automod_rikudou:
    image: ghcr.io/rikudousage/lemmy-automod:dev@sha256:45d5c95c0590d4eb63167edd5a2e4ca6fa62cd130279df64f06a6a00702c8b3c
    environment:
{% if lemmy_automod_rikudou_env_vars is defined and lemmy_automod_rikudou_env_vars|length > 0 %}
{% for item in lemmy_automod_rikudou_env_vars %}
{% for key, value in item.items() %}
      - {{ key }}={{ value }}
{% endfor %}
{% endfor %}
{% endif %}
    volumes:
      - ./volumes/automoderator_rikudou:/opt/database

  redis:
    image: redis
    ports:
      - 6379:6379

  webhooks:
    image: ghcr.io/rikudousage/lemmy-webhook:0.18@sha256:63fb224cf100fbc807f652e767765312ce62a26e39fc13af85489751fba5e823
    #platform:linux/amd64
    environment:
      - LEMMY_HOST=postgres # the hostname of the postgres database
      - REDIS_HOST=redis # the hostname of the redis server, you can use the above redis container if you define it as part of this stack
      - LEMMY_PASSWORD={{ postgres_password }} # the password to the postgres database
      - API_REGISTRATION_ENABLED=1 # whether to allow users to register themselves via the api
      - CORS_ALLOW_ORIGIN=^.*$$  # a regex for cors (you need to escape $ with another $)
      - LARGE_PAYLOAD_SIZE=1024 # payloads larger than this size (in bytes) will be stored in a temporary table instead of fed directly to the consumer, default is 4096. If set to 0, all payloads will be stored.
    ports:
      - 127.0.0.1:5317:80 # you can skip this, if you don't use the management api
    volumes:
      - ./volumes/webhooks:/opt/database # bind a directory where the SQLite database will be created

  webhooks-ui:
    image: ghcr.io/rikudousage/lemmy-webhook-manager:latest
    ports:
      - 5318:80 # map to whatever port you want
    environment:
      - API_URL=https://webhooks-api.{{ domain }} # replace with your api url
